---
layout: post
title:  知 识 要 点
date:   2015-07-21 10:00:11
category: "C++ 编程思想"
---
* ####[1.各章概要](#1) 
* [1.1 对象导言](#1.1) 
* [1.2 对象的创建与使用](#1.2) 
* [1.3 C++中的C](#1.3)
* [1.4 数据抽象](#1.4) 
* [1.5 隐藏实现](#1.5) 
* [1.6 初始化与清除](#1.6)
* [1.7 函数重载与默认参数](#1.7)
* [1.8 常量](#1.8)
* [1.9 内联函数](#1.9)
* [1.10 名字控制](#1.10)
* [1.11 引用和拷贝构造函数](#1.11)
* [1.12 运算符重载](#1.12)
* [1.13 动态对象创建](#1.13)
* [1.14 继承和组合](#1.14)
* [1.15 多态性和虚函数](#1.15)
* * ##[1.16 模板介绍](#1.16)
---


<h2 id="1"> 1.各章概要</h2> 

<h3 id="1.1"> 1.1 对象导言</h3> 

引导读者了解OOP(面向对象程序设计)的基本概念和特征，介绍分析和设计过程。

<h3 id="1.2"> 1.2 对象的创建与使用</h3> 

**语言的翻译过程**

	将源代码翻译成机器指令。通常翻译器为两类: 解释器和编译器
	1. 解释器
		将源代码转化成一些动作(它可以由多组机器指令组成)并立即执行这些动作。
		优点: 从写的代码到执行代码的转换几乎能直接完成，一旦出现错误，解释器能很容易指出。
		缺点: 解释器必须驻留内存以执行程序，这造成内存空间的限制，所以不适用与大项目。大部分解释器需要一次性输入全部代码，所以语言不提供设施来隔离不同代码段之间影响，一旦出错，难以调试。(Python是一个例外)
	2. 编译器
		编译器直接把源代码转化成汇编语言或者机器指令。最终的结果是一个或多个机器代码的文件。
		优点: 编译后的程序较小，运行速度快。但主要优点是分段编译，将已通过测试并能正常运行的代码段，收集成库，可供其他程序员使用。这样避免的程序的复杂性，支持大程序的创建。
		编译器的调试功能: 早期只能插入打印语句，现在可以在执行程序中插入代码相关的信息。代码层的调试器的使用，可以通过跟踪程序经过源代码的展开显示程序的执行情况。
		缺点: 由于编译器或编译环境的限制，不能一次性完成编译序，但是程序可以分段编译
	3. 编译过程
		一般分两遍进行。第一遍，首先对预处理代码进行语法分析。再将源代码分解成小的单位按树形结构组织(形成语法分析树)。这里会用到预处理器。有时会在第一遍和第二遍之间使用全局优化器来生成更短、更快的代码。
		第二遍，有代码生成器遍历语法分析书，把树的每个结点转化车工汇编语言或机器代码。如果生成的是汇编语言，还必须用汇编器对其汇编。两种情况的最后结果都是生成目标模块(通常是一个.o或.obj为扩展名的文件)
		连接器把一组目标模块连接成为一个可以执行的程序，操作系统可以装载和执行它。在启动任务之前，连接器会创建一个特殊的模块来完成启动。连接器的功能: 可以处理引用另一目标模块的函数或变量，能搜索成为"库"的特殊文件处理它的所有引用。
	 	类型检查，一般在编译第一遍的时候检查。C++采用静态类型检查。但是有些面向对象语言(如java)可以在运行时作部分类型检查[动态类型检查]。动态与静态同时使用，增加的程序开销，但比静态更有效。
	 	
**分段编译工具**		

	1. 声明与定义
		变量与函数
		‘
			extern int i; // Declaration without definition
			entern float f(float); Function declaration
			float b; // Declaration & definition
			float f(float a){ // definition
				return a + 1.0;
			}
			int i; // difiniton
			int h(int x){// Declaration & definition
			return x+1;
			}
		'
		包含头文件
			以尖括号指定文件，如 #include<header>，预处理器是以特定的方式文件，一般是环境中或编译器命令行指定的某种寻找路径
			以双引号指定文件，如 #include "header"，通常是从当前目录开始寻找，如果文件没有找到，再与尖括号的方式重新进行寻找。
	2. 连接
		前面介绍过连接器的作用了，这里只说当连接的时候发生一些莫名其妙的问题时，要注意是否文件的顺序是否有误。
	3. 使用库文件，步骤:
		包含库的头文件->使用库中的变量和函数->把库连接进可执行程序
		
	
<h3 id="1.3"> 1.3 C++中的C</h3> 

详细综述在C++中使用C的特征和一些只在C++中使用的特征。

<h3 id="1.4"> 1.4 数据抽象</h3> 

可以看到如果用将函数放入结构内部的简单过程来实现面向对象思想，并可以看到如果具体地完成这样的过程和创建什么样的代码。

<h3 id="1.5"> 1.5 隐藏实现</h3> 

数据私有化

<h3 id="1.6"> 1.6 初始化与清除</h3> 

构造和析构函数

<h3 id="1.7"> 1.7 函数重载与默认参数</h3> 

体会重载解决引用使用相同函数名的多个库，或者解决在同一个库中选择具有不同含义的相同的名字。

默认参数通过自动为某些参数提供默认值，使我们能用不同的方式调用一个函数

<h3 id="1.8"> 1.8 常量</h3> 

讨论const和volatile关键字

<h3 id="1.9"> 1.9 内联函数</h3> 

内联函数具有的好处: 具有预处理宏的好处和实际函数调用的所有好处

<h3 id="1.10"> 1.10 名字控制</h3> 

C++中使用两种技术控制名字: 使用关键字static控制可视性和连接，研究它对于类的特殊含义; 在全局范围内更有用的namespace特征55

<h3 id="1.11"> 1.11 引用和拷贝构造函数</h3> 


<h3 id="1.12"> 1.12 运算符重载</h3> 

<h3 id="1.13"> 1.13 动态对象创建</h3> 

<h3 id="1.14"> 1.14 继承和组合</h3> 

<h3 id="1.15"> 1.15 多态性和虚函数</h3> 

<h3 id="1.16"> 1.16 模板介绍</h3> 
